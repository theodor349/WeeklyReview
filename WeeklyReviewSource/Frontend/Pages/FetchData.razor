@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<RadzenText TextStyle="TextStyle.DisplayH5">Weather forecast</RadzenText>

<RadzenText>This component demonstrates fetching data from the server.</RadzenText>

@if (forecasts == null)
{
    <RadzenText>Loading...</RadzenText>
}
else
{

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                AllowGrouping="false" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                Data="@forecasts" TItem="WeatherForecast" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                IsLoading=@isLoading>
                <Columns>
                    <RadzenDataGridColumn TItem="WeatherForecast" Property="Date" Title="Date" TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureC" Title="Temp. (C)" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="WeatherForecast" Property="Summary" Title="Summary" TextAlign="TextAlign.Left" />
                </Columns>
    </RadzenDataGrid>
}

@code {
    private WeatherForecast[]? forecasts;

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        isLoading = false;
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
