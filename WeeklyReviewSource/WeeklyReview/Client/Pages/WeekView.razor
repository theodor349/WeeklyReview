@page "/weekview"
@attribute [Authorize]
@using System.Globalization;
@using System.Drawing;
@using Microsoft.AspNetCore.Authorization;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Schedule;

<PageTitle>Week View</PageTitle>
    <div class="container-fluid">
    <SfSchedule TValue="ScheduleViewModel" @ref="ScheduleObj" Width="100%" Height="calc(100vh - 4.6rem)" SelectedDateChanged=@(OnDateChanged) 
                EnableAutoRowHeight="true"
                AllowMultiCellSelection="false" AllowMultiRowSelection="false" AllowDragAndDrop="false" AllowResizing="false"
                DateFormat="yyyy-MM-dd" TimeFormat="HH:mm" StartHour="00:00" FirstDayOfWeek="1" ShowWeekNumber="true">
        <ScheduleEvents TValue="ScheduleViewModel" OnPopupOpen="@OnPopupOpen"></ScheduleEvents>
        <ScheduleTimeScale Interval="60" SlotCount="4"></ScheduleTimeScale>
        <ScheduleTemplates>
            <DateHeaderTemplate>
                <div class="date-text">@(getDateHeaderText((context as TemplateContext).Date))</div>
            </DateHeaderTemplate>
        </ScheduleTemplates>
@*        <ScheduleResources>
            <ScheduleResource TItem="CategoryViewModel" TValue="int" DataSource="@Categories" Field="CategoryId" IdField="Id" ColorField="Color" AllowMultiple="false"></ScheduleResource>
        </ScheduleResources>*@
        <ScheduleEvents TValue="ScheduleViewModel" EventRendered="OnEventRendered"></ScheduleEvents>
        <ScheduleEventSettings DataSource="@DataSource"
            IgnoreWhitespace="true" AllowDeleting="false" SpannedEventPlacement="@SpannedEventPlacement.TimeSlot">
            <Template>
                <div class="e-appointment-details">
                    <div class="e-subject" style="color:@(TextColor((context as ScheduleViewModel)))">@((context as ScheduleViewModel).Subject)</div>
                    @if((context as ScheduleViewModel).Duration.TotalMinutes > 15)
                    {
                        <div class="e-time" style="color:@(TextColor((context as ScheduleViewModel)))">@((context as ScheduleViewModel).StartTime.ToString("HH:mm")) - @((context as ScheduleViewModel).EndTime.ToString("HH:mm"))</div>
                    }
                </div>
            </Template>
        </ScheduleEventSettings>
        <ScheduleQuickInfoTemplates TemplateType="TemplateType.Cell">
            <HeaderTemplate>
            </HeaderTemplate>
            <ContentTemplate>
                <EnterActivity ResetOnInit=@(true) OnAfterEntryAdded=@(OnEntryAdded) ViewDate="@((context as ScheduleViewModel).StartTime)">

                </EnterActivity>
            </ContentTemplate>
            <FooterTemplate>
            </FooterTemplate>
        </ScheduleQuickInfoTemplates>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.WorkWeek"></ScheduleView>
            <ScheduleView Option="View.Month"></ScheduleView>
        </ScheduleViews>
    </SfSchedule>
</div>

<style>
    .e-schedule .e-vertical-view .e-time-cells-wrap table td, .e-schedule .e-vertical-view .e-work-cells {
        height: 24px;
    }

    .schedule-cell-dimension.e-schedule .e-month-view .e-work-cells {
        height: 200px;
    }

    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment .e-subject {
        font-size: 12px;
        padding-top: 2px;
    }
    
</style>

@code{

    private SfSchedule<ScheduleViewModel> ScheduleObj;

    public static string getDateHeaderText(DateTime date)
    {
        return date.ToString("dd dddd", CultureInfo.CurrentCulture);
    }

    public void OnEventRendered(EventRenderedArgs<ScheduleViewModel> args)
    {
        Dictionary<string, object> attributes = new Dictionary<string, object>();
        attributes.Add("style", "background: " + args.Data.RgbColorString);
        args.Attributes = attributes;
    }

    public void Add15Minutes() => InputDate = InputDate.AddMinutes(15);
    public void Sub15Minutes() => InputDate = InputDate.AddMinutes(-15);
    public void ResetTime()
    {
        InputDate = DateTime.Now;
        TimeUpdated();
    }
    public void GoToView() => ViewDate = InputDate;
    private void OnDateChange(ChangedEventArgs<DateTime> args)
    {
        InputDate = args.Value;
        TimeUpdated();
        StateHasChanged();
    }

    public string TextColor(ScheduleViewModel model)
    {
        if ((model.RgbR * 0.299 + model.RgbG * 0.587 + model.RgbB * 0.114) > 186)
            return "black";
        else
            return "white";
    }

    private void OnPopupOpen(PopupOpenEventArgs<ScheduleViewModel> args)
    {
        if (args.Type == PopupType.Editor) //to prevent the editor on cells
        {
            args.Cancel = true;
        }
    }
}