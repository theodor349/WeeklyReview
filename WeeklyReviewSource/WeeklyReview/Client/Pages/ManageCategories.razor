@page "/categories"
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Notifications;
<PageTitle>Categories</PageTitle>

<SfColorPicker></SfColorPicker>

<SfColorPicker 
    Mode="ColorPickerMode.Palette" 
    ModeSwitcher="false" 
    PresetColors="@CustomColors">
</SfColorPicker>

<Syncfusion.Blazor.Grids.SfGrid AllowPaging="true" DataSource="@Categories" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"/>
    <GridColumns>
        <GridColumn Field=@nameof(CategoryViewModel.Name) HeaderText="Category" AllowEditing="false" ValidationRules="@(new ValidationRules{ Required=true})" TextAlign="TextAlign.Left" Type="ColumnType.String" Width="120"></GridColumn>
        <GridColumn Field=@nameof(CategoryViewModel.Priority) HeaderText="Priority" ValidationRules="@(new ValidationRules{ Required=true})" EditType="EditType.NumericEdit" Width="120"></GridColumn>
        <GridColumn Field=@nameof(CategoryViewModel.Color) HeaderText="Codor" TextAlign="TextAlign.Right" Width="130">
            <Template>
                <SfColorPicker Mode="ColorPickerMode.Palette" Disabled="true" ModeSwitcher="false" @bind-Value="@((context as CategoryViewModel).ColorHex)">
                </SfColorPicker>
            </Template>
            <EditTemplate>
                <SfColorPicker 
                    Mode="ColorPickerMode.Palette" 
                    ModeSwitcher="false" 
                    ShowButtons="false" 
                    @bind-Value="@((context as CategoryViewModel).ColorHex)" 
                    PresetColors="@CustomColors"/>
            </EditTemplate>
        </GridColumn>
    </GridColumns>
    <GridEvents TValue="CategoryViewModel" OnActionBegin="ActionBegin" OnActionComplete="ActionComplete"></GridEvents>
</Syncfusion.Blazor.Grids.SfGrid>

<SfColorPicker></SfColorPicker>


@code{
    public void ActionBegin(ActionEventArgs<CategoryViewModel> arg)
    {
        if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add))
        {
            arg.Data = new CategoryViewModel();
        }
        else if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            arg.Data = new CategoryViewModel(arg.RowData.GetModel()); // Todo: change back to CloneModel
        }
        else if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            UpdateCategory(arg.Data.GetModel());
        }
        else if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Cancel))
        {
            UpdateCategory(arg.Data.GetModel());
        }
        else 
        {

        }
    }
    public void ActionComplete(ActionEventArgs<CategoryViewModel> arg)
    {
        if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            UpdateCategory(arg.Data.GetModel());
        }
        if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Cancel))
        {
            UpdateCategory(arg.Data.GetModel());
        }
        else
        {

        }
    }
}